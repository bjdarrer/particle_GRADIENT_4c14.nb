(* Model G Particle *)
(*Model G Particle Formation Author:Matt \
Pulver<matt@blue-science.org>
2010-2013 This file verifies the mathematics and generates some of \
the images found in the paper "Stationary Dissipative Solitons of \
Model G" by Matt Pulver and Paul LaViolette published in \
International Journal of General Systems 42(5) July 2013 download PDF \
from http://starburstfound.org/downloads/physics/model_G.html \
Requirements:Mathematica 9.0
Additions to code here by Michael Remington & Brendan Darrer August \
2019.
*)
(*bjd 15 aug 2019*)

ClearSystemCache[]

Clear["Global`*"]

L = 140; (*bjd 15 aug 2019---> L = 100;*)
(*Lplot = 25;*) (* Plot \
width *)
Lplot = 140;
(*....................................*)
Ti = 200;
T = Tf = 10000000;
ndsolveimp = Import["ndsolve_t200b.wdx"]

{pY, pG, pX} = {pYb, pGb, pXb} /. First[ndsolveimp] 
(*....................................*)

Tflux = 10; (* time when fluctuation is maximum *)

subs = {a -> 14, b -> 29, dx -> 1, dy -> 12, p -> 1, q -> 1,
      g -> 1/10, s -> 0, u -> 0, v -> {0, 0, 0}, w -> 0 };

(*DIMENSION=1
GRADIENT = -10/300000
*)

dimension = ToExpression[Environment["DIMENSION"]];
If[ dimension == $Failed, dimension = 1 ];

(*
gradpower = ToExpression[Environment["GRADPOWER"]]
If[ gradpower == $Failed, Print["GRADPOWER required."]; Exit[] ];
gradient = -1 * 10^gradpower
*)
k = 0; (*k = 1, 10*)
gradient = 
 ToExpression[Environment["GRADIENT"]]
gradient = -k/300000
If[ gradient == $Failed, Print["GRADIENT required."]; Exit[] ];

initampfac = 3875/4096

gradf[x_, t_] := ( gradient * x + 1/60000 ) UnitStep[t - 100]

(*title = "Particle "<>ToString[dimension]<>"D \
"<>ToString[N[gradpower[]*)
title = 
 "Particle 4c14 " <> ToString[dimension] <> "D " <> ToString[
     NumberForm[N[gradient], 
    NumberFormat -> (SequenceForm[#1, "e", #3] &) ] ]

filename = StringReplace[ToLowerCase[title], " " -> "_"]

r0 = 1/1000000000;

(* Off[General::stop] *)

Needs["PlotLegends`"]
Needs["VectorAnalysis`"] (* Laplacian *)

If[ dimension == 1,
   SetCoordinates[Cartesian[x, y, z]];
   maxstepsize = 0.025;
   plotrange = 10, (*BJD was 1*)
   If[ dimension == 2,
      SetCoordinates[Cylindrical[x, theta, z]];
      maxstepsize = 0.015;
      plotrange = 1.6,
      If[ dimension == 3,
         SetCoordinates[Spherical[x, theta, phi]];
         maxstepsize = 0.015;
         plotrange = 2,
         Print[ "Invalid dimension=", dimension ]
       ]
    ]
 ]
(*maxstepsize = 0.03;*)
maxstepsize = 1000;

bell[s_, x_] := Exp[-(x/s)^2/2]

dbell[n_, s_, x_] := Evaluate[D[bell[s, x]/(n - 1)!!, {x, n}]]

bell2d[s_, x_, y_] := Exp[-(x^2 + y^2)/s^2/2]

bell3d[s_, x_, y_, z_] := Exp[-(x^2 + y^2 + z^2)/s^2/2]

(*
       A --k1--> G            G --k1m--> A
       G --k2--> X            X --k2m--> G
   B + X --k3--> Y + Z    Y + Z --k3m--> B + X
  2X + Y --k4--> 3X          3X --k4m--> 2X + Y
       X --k5--> Om          Om --k5m--> X
*)

rediff0 = {
     -ddtdim G + Dg lapdim G - V gradim G - (k1m + k2) G + k2m X + 
   k1 A,
     -ddtdim X + Dx lapdim X - V gradim X + 
   k2 G - (k2m + k3 B + k5) X + k3m Z Y
         - k4m X^3 + k4 X^2 Y + k5m Om,
     -ddtdim Y + Dy lapdim Y - V gradim Y + k3 B X - k3m Z Y
         + k4m X^3 - k4 X^2 Y
  }

rediff1 = 
 rediff0 /. { ddtdim -> ddt / tc, lapdim -> laplacian / lc^2,
      gradim -> grad / lc, G -> Gc Gb, X -> Xc Xb, Y -> Yc Yb }

rediff1 = Collect[rediff1, {Gb, Xb, Yb}, Simplify]

(* Priorities for these substitutions are:
1. Set coefficients of time derivatives to 1 for phase space \
analyzation.
2. All named coefficients must remain bounded if any of the reverse
   kinetic constants k\[Minus]i go to zero. *)

(* Set time derivative coefficients to 1 *)
rediff2 = { 
  rediff1[[1]] tc/Gc,
    rediff1[[2]] tc/Xc,
    rediff1[[3]] tc/Yc }

rediff2 = 
 Collect[rediff2, {Gb, Xb, Yb, ddt, laplacian, grad}, Simplify]

(*
rediff3 = rediff2 //. {
  tc -> 1/(k4 Xc Yc),  (*  Xb^2 Yb in X *)
  Xc -> Yc,            (* \
-Xb^2 Yb in Y *)
  Yc -> Sqrt[(k2m+k5)/k4], (* Xb in Y, set to q *)
  \
Gc -> (k2m+k5)^(3/2)/(k2 Sqrt[k4]), (* Gb in X *)
  lc -> \
Sqrt[Dx/(k2m+k5)] (* laplacian Xb in X *)
}
*)

rediff3 = rediff2 //. {
     tc -> 1/(k4 Xc Yc),  (*  Xb^2 Yb in X *)
     
   Xc -> Yc,            (* -Xb^2 Yb in Y *)
     
   Gc -> Xc,            (* v*Grad[C] for C = G, X, Y *)
     
   Yc -> Sqrt[(k2m + k5)/k4], (* Xb in Y, set to q *)
     
   lc -> Sqrt[Dg/(k2m + k5)]  (* laplacian Gb in G *)
   }

rediff3 = Collect[rediff3, {Gb, Xb, Yb, ddt, laplacian, grad},
     Simplify[#, Assumptions -> {0 < k4, 0 < Dg}] &]

rediff3test = rediff2 //. {
     tc -> 1/(k2m + k5),  (*  Xb^2 Yb in X *)
     
   Xc -> Sqrt[(k2m + k5)/k4], (* -Xb^2 Yb in Y *)
     
   Yc -> Sqrt[(k2m + k5)/k4], (* Xb in Y, set to q *)
     
   Gc -> Sqrt[(k2m + k5)/k4], (* v*Grad[C] for C = G, X, Y *)
     
   lc -> Sqrt[Dg/(k2m + k5)] (* laplacian Gb in G *)
   }
rediff3test = 
 Collect[rediff3, {Gb, Xb, Yb, ddt, laplacian, grad}, 
  Simplify[#, Assumptions -> {0 < k4, 0 < Dg}] &]

Print["Is rediff3 == rediff3test?"];

Simplify[ rediff3 == rediff3test ]

nondimensionalized = {
    -ddt Gb +   laplacian Gb - v grad Gb - q Gb +    g  Xb        + 
   a,
    -ddt Xb + dx laplacian Xb - v grad Xb + p Gb - (1 + b) Xb + 
   u Yb + w
        - s Xb^3 + Xb^2 Yb,
    -ddt Yb + dy laplacian Yb - v grad Yb        +    b  Xb - u Yb
        + s Xb^3 - Xb^2 Yb }

redifftest = nondimensionalized /. {
     a -> k1 Sqrt[k4]/(k2m + k5)^(3/2) A, (* 
   constant term in G *)
     b -> k3/(k2m + k5) B, (* -(1+b)Xb in X, 
   b Xb in Y *)
     dx -> Dx/Dg, (* laplacian Xb in X *)
     
   dy -> Dy/Dg, (* laplacian Yb in Y *)
     p -> k2/(k2m + k5), (* 
   Gb in X *)
     q -> (k1m + k2)/(k2m + k5), (* -Gb in G *)
     
   g -> k2m/(k2m + k5), (* Xb in G *)
     
   s -> k4m/k4, (* (-/+)Xb^3 in (X/Y) *)
     
   u -> k3m/(k2m + k5) Z, (* (+/-)Yb in (X/Y) *)
     
   v -> V / Sqrt[Dg (k2m + k5)], (* -Grad[C] for C = G, X, Y *)
     
   w -> Sqrt[k4] k5m/(k2m + k5)^(3/2) Om } (* constant term in X *)

Print["Is rediff3 == redifftest?"];
Simplify[ rediff3 == redifftest, 
 Assumptions -> {0 < Dg, 0 < k2m + k5} ]

Print["To return to dimensionalized system:"];
Simplify[Solve[ {
      tc == 1/(k2m + k5),  (*  Xb^2 Yb in X *)
    (*Xc == Sqrt[(k2m+
    k5)/k4], (* -Xb^2 Yb in Y *) *)
    (*Yc == Sqrt[(k2m+k5)/k4], (* 
    Xb in Y, set to q *) *)
      Gc == Sqrt[(k2m + k5)/k4], (* v*
    Grad[C] for C = G, X, Y *)
      lc == Sqrt[Dg/(k2m + k5)], (* 
    laplacian Gb in G *)
      a == k1 Sqrt[k4]/(k2m + k5)^(3/2) A, (* 
    constant term in G *)
      b == k3/(k2m + k5) B, (* -(1+
    b)Xb in X, b Xb in Y *)
      dx == Dx/Dg, (* 
    laplacian Xb in X *)
      dy == Dy/Dg, (* 
    laplacian Yb in Y *)
      p == k2/(k2m + k5), (* 
    Gb in X *)
      q == (k1m + k2)/(k2m + k5), (* -Gb in G *)
      
    g == k2m/(k2m + k5), (* Xb in G *)
      
    s == k4m/k4, (* (-/+)Xb^3 in (X/Y) *)
      
    u == k3m/(k2m + k5) Z, (* (+/-)Yb in (X/Y) *)
      
    v == V / Sqrt[Dg (k2m + k5)], (* -Grad[C] for C = G, X, 
    Y *)
      w == Sqrt[k4] k5m/(k2m + k5)^(3/2) Om (* 
    constant term in X *)
      }, { Dg, Dx, Dy, A, B, V, Z, Om, k1, 
    k2, k3, k4, k5, k1m, k2m, k3m, k4m, k5m }
   ][[2]], Assumptions -> {0 < lc, 0 < tc}]

(* G-Independence *)
gbsub = 
 Solve[ 0 == nondimensionalized[[2]] + nondimensionalized[[3]], Gb ][[
  1]]
xy1 = nondimensionalized[[1]] /. gbsub
Print["G-Independence:"];
Collect[ -xy1, {Xb, Yb}, Collect[#, {ddt, laplacian, grad}] & ]

(* Homogeneous steady state solution *)
Clear[Gb0, Xb0, Yb01, Yb0,
        Gb1, Xb1, Yb11, Yb1];

hss = nondimensionalized /. { ddt -> 0, laplacian -> 0, grad -> 0 }

Yb01 = Yb /. Solve[0 == (hss[[3]] /. Xb -> Xb0), Yb][[1]];

Print[ "Yb01 = ", Yb01 ];

hsseqs = Map[0 == # &, hss];
(*Print[ "hsseqs = ",hsseqs ];*)

hsssolve = Solve[ hsseqs, {Gb, Xb, Yb} ];
(* Print[ "hsssolve = ", hsssolve ]; *)

{ Gb0, Xb0, Yb0 } = { Gb, Xb, Yb } /. First[hsssolve]

Gb1 = (   a + g w ) / ( q - g p );
Xb1 = ( p a + q w ) / ( q - g p );
Yb11 = ( s Xb0^2 + b ) Xb0 / ( Xb0^2 + u );
Yb1 = ( p a + q w ) ( s ( p a + q w )^2 + b ( q - g p )^2 ) /
        ( (   q - g p ) (   ( p a + q w )^2 + u ( q - g p )^2 ) );
Print[ "Gb0 = ", Gb0 ];
Print[ "Xb0 = ", Xb0 ];
Print[ "Yb01 = ", Yb01 ];
Print[ "Yb0 = ", Yb0 ];
Print[ "Confirm that the homogeneous state values are correct:" ];
Simplify[ { Gb0, Xb0, Yb01, Yb0 } == { Gb1, Xb1, Yb11, Yb1 } ]

potentials = { -ddt pGb +   laplacian pGb - v grad pGb - q pGb + g pXb,
    -ddt pXb + dx laplacian pXb - v grad pXb + p pGb - (1 + b) pXb + 
   u pYb -
        s ( (pXb + Xb0)^3 - Xb0^3 ) + ( (pXb + Xb0)^2 (pYb + Yb0) - 
     Xb0^2 Yb0 ),
    -ddt pYb + dy laplacian pYb - v grad pYb              + b  pXb - 
   u pYb +
        s ( (pXb + Xb0)^3 - Xb0^3 ) - ( (pXb + Xb0)^2 (pYb + Yb0) - 
     Xb0^2 Yb0 ) }

Print[ "Potentials equations are equivalent to nondimensionalized \
equations:" ];
Simplify[ potentials == nondimensionalized /. {
     ddt Gb -> ddt pGb, laplacian Gb -> laplacian pGb, 
   grad Gb -> grad pGb,
     ddt Xb -> ddt pXb, laplacian Xb -> laplacian pXb, 
   grad Xb -> grad pXb,
     ddt Yb -> ddt pYb, laplacian Yb -> laplacian pYb, 
   grad Yb -> grad pYb,
     Gb -> pGb + Gb0, Xb -> pXb + Xb0, Yb -> pYb + Yb0 } ]

(* G-Independence *)
pGbsub = 
 Collect[Solve[0 == potentials[[2]] + potentials[[3]], pGb][[
   1]], {pXb, pYb}]
pXY = Collect[ Expand[-p*potentials[[1]] /. pGbsub], {pXb, pYb},
     Collect[#, {ddt, laplacian, grad}] & ]
pXYlatex = ( ddt^2
      + 2 v ddt grad
      + (v grad)^2
      - (1 + q dx) laplacian
      + dx laplacian^2
      + q - g p
      + (1 + q) ddt
      + (1 + q) v grad
      - (1 + dx) ddt laplacian
      - (1 + dx) v grad laplacian
     ) pXb + (
       ddt^2
      + 2 v ddt grad
      + (v grad)^2
      - q dy laplacian
      + dy laplacian^2
      + q ddt
      + q v grad
      - (1 + dy) ddt laplacian
      - (1 + dy) v grad laplacian
     ) pYb;
Print["Verify pXY:"];
Simplify[ pXY == pXYlatex ]

(*Astep[x_,t_] := bell[1, x] (1 + Erf[100 (50 - t)])/2;*)

Xterm[x_, t_] := -bell[1, x] bell[3, t - Tflux];
Print[ "potentials = ", potentials ];
pdes0 = potentials /. {
    (*a -> a(1-0.5 bell[5,x]),*)
    (*a -> a Cosh[Sqrt[a/Da]x] / 
    Cosh[Sqrt[a/Da]xmax],*)
    (*a -> a Astep[x,t],*)
      
    pGb -> pGb[x, t], pXb -> pXb[x, t], pYb -> pYb[x, t],
      ddt pGb -> D[pGb[x, t], t], 
    laplacian pGb -> Laplacian[pGb[x, t]],
      v grad pGb -> v.Grad[pGb[x, t]],
      ddt pXb -> D[pXb[x, t], t], 
    laplacian pXb -> Laplacian[pXb[x, t]],
      v grad pXb -> v.Grad[pXb[x, t]],
      ddt pYb -> D[pYb[x, t], t], 
    laplacian pYb -> Laplacian[pYb[x, t]],
      v grad pYb -> v.Grad[pYb[x, t]] };
(*Print[ "pdes0 = ",pdes0 ];*)
(* pdes1 = Simplify /@ ( Expand /@ { \
pdes0[[1]], pdes0[[2]] + Xterm[x,t], pdes0[[3]] } );
*)
(*pdes1 = Simplify[ pdes0 + { 0, Xterm[x,t], 0 } /. theta -> Pi/4 \
];*)
(*pdes1 = Simplify[ pdes0 /. theta -> Pi/4 ];*)

pdes1 = Simplify[ pdes0 + { gradf[x, t], 0, 0 } /. theta -> Pi/4 ];
(*Print[ "pdes1 = ",pdes1 ];*)
pdes2 = Map[ 0 == # &, pdes1 ];
(*Print[ "pdes2 = ",pdes2 ];*)
pdes3 =
    Join[ pdes2, If[ dimension == 1,
         {
            pGb[ L/2, t] == 0, pXb[ L/2, t] == 0, pYb[ L/2, t] == 0,
            pGb[-L/2, t] == gradf[-L/2, t], pXb[-L/2, t] == 0, 
      pYb[-L/2, t] == 0,
          (*pGb[x,0] == 0, pXb[x,0] == 0, pYb[x,0] == 0*)
      
      pGb[x, Ti] == pG[x, Ti],
      pXb[x, Ti] == pX[x, Ti],
      pYb[x, Ti] == py[x, Ti]
                }, {
      (*
      pGb[x,0] == -0.161 bell[0.363,x] * initampfac,
            pXb[x,0] == -8.37  bell[0.272,x] * initampfac,
            pYb[x,0] ==  0.93  bell[0.302,x] * initampfac
          }, {
      *)
            pGb[L/2, t] == 0, pXb[L/2, t] == 0, 
      pYb[L/2, t] == 0,
            ( D[pGb[r, t], r] /. r -> r0 ) == 0,
            ( D[pXb[r, t], r] /. r -> r0 ) == 0,
            ( D[pYb[r, t], r] /. r -> r0 ) == 0,
            
      pGb[x, 0] == 
       If[ dimension == 
         2, -0.308 bell[0.739, x], -0.411 bell[1.14, x] ],
            
      pXb[x, 0] == 
       If[ dimension == 2, -13.6 bell[0.634, x], -14.6 bell[1.04, x] ],
            
      pYb[x, 0] == 
       If[ dimension == 2, 1.5 bell[0.665, x], 1.7 bell[1.07, x] ]
          } ] ] /. subs;
Print[ "pdes3 = ", pdes3 ];

(* Linearize *)

linear1 = 
  Expand[potentials] /. { pXb^2 -> 0, pXb^3 -> 0, pXb pYb -> 0 };
linear2 = 
  Map[ # /. { ddt -> 0, laplacian -> 0, grad -> 0 } &, linear1 ];
A = Table[
   Coefficient[linear2[[i]], {pGb, pXb, pYb}[[j]]], {i, 1, 3}, {j, 1, 
    3}];
Asubs = A /. subs;
Print["Constant maxtrix A = ", MatrixForm[Asubs]];
Print["has eigenvalues ", Eigenvalues[Asubs] // N, "."];

(* Numerically Solve the PDEs *)

Print["NDSolve started at ", DateString[]];
Print["MaxStepSize = ", maxstepsize];
timestarted = AbsoluteTime[];
ndsolve = NDSolve[ pdes3, {pGb, pXb, pYb},
    {x, If[ dimension == 1, -L/2, r0 ], L/2}, {t, Ti, Tf},
    MaxStepSize -> maxstepsize, MaxSteps -> 40000 ]
Print["NDSolve ended at ", DateString[]];
Print["and took ", AbsoluteTime[] - timestarted, " seconds."];

{ pY, pG, pX } = { pYb, pGb, pXb } /. First[ndsolve] 
(*
Export["ndsolve_t500.wdx",ndsolve]
Export["ndsolve_t500.txt",ndsolve]
*)
(*
(* Output first zeroes of pX *)
pX0i = -0.642;
pX1i =  0.642;
di=1;
xpositions = Table[
(*xcur = x /. Last[ NMinimize[ pX[x,t], {x, xcur-1/12, xcur+1/12} ] \
];*)
  pX0 = x /. FindRoot[ pX[x,t], { x, pX0i } ];
  pX1 = x /. FindRoot[ pX[x,t], { x, pX1i } ];
  { t, pX0, pX1 },
  { t, 495, T , di} ];
Export[ filename<>".csv", xpositions ]

Print[ "Core amplitude:" ];
Print[ "pY[0,T] = ", pY[0,T] ];
Print[ "pG[0,T] = ", pG[0,T] ];
Print[ "pX[0,T] = ", pX[0,T] ];
*)
(* Exit[] *)
(*

(* Find first zeroes based on given estimates *)
Print[ "Core \
zeroes:" ];
pY0 = r /. FindRoot[ pY[r,T], { r, 1 } ];
pG0 = r /. FindRoot[ pG[r,T], { r, 1 } ];
pX0 = r /. FindRoot[ pX[r,T], { r, 1 } ];
Print[ "pY0 = ", pY0 ];
Print[ "pG0 = ", pG0 ];
Print[ "pX0 = ", pX0 ];

(* Find the zeroes *)
Print["Finding zeroes started at ",DateString[]];
timestarted = AbsoluteTime[];
zeroes = Union[
  Select[
    Table[ x /. FindRoot[ #[x,T], {x,x0} ], { x0, pX0, L/2, 1/12 } ],
    0 < # <= L/2 & ],
  SameTest -> (Abs[#1-#2] < 1/10000 &)
] & /@ { pY, pG, pX };
Print["Zeroes found at ",DateString[]];
Print["and took ",AbsoluteTime[]-timestarted," seconds."];

Export[ "zeroes_"<>ToString[dimension]<>"d.csv", zeroes ]

zeroesplot = ListPlot[
  Transpose[ { ListConvolve[{1,1}/2,#], Differences[#] } ]& /@ \
zeroes,
  Frame -> True,
  FrameLabel -> {
    Style["Midpoints Between Zeroes", 32],
    Style["Differences Between Zeroes", 32] },
  FrameStyle -> Thick,
  FrameTicksStyle -> Directive[Thick, 24],
  ImageSize -> { 1280 },
  LegendPosition -> { 2, 1 }/4,
  LegendSize -> { 1, 1 }/4,
  LegendShadow -> { 1, -1 }/50,
  PerformanceGoal -> "Quality",
  PlotLegend -> {
    Style["\*SubscriptBox[\"\[CurlyPhi]\",\"Y\"]", 24],
    Style["\*SubscriptBox[\"\[CurlyPhi]\",\"G\"]", 24],
    Style["\*SubscriptBox[\"\[CurlyPhi]\",\"X\"]", 24] },
  PlotMarkers -> { Automatic, Large },
  PlotRange -> All,
  PlotStyle -> {
    Directive[AbsoluteThickness[3], Darker[Yellow], Dashing[Small]],
    Directive[AbsoluteThickness[3], Darker[Blue]],
    Directive[AbsoluteThickness[3], Purple, Dashing[Medium]] }
]
Export[ "zeroes_"<>ToString[dimension]<>"d.eps", zeroesplot ]

differences = Join @@ Differences /@ zeroes

binwidth = 0.02;
histogram = Labeled[ Histogram[ differences, {binwidth}
(*ChartElementFunction -> "FadingRectangle",*)
  ], "Differences \
Between Zeroes",
  LabelStyle -> Directive[ FontFamily -> "Times" ]
]
Export[ "histogram_"<>ToString[dimension]<>"d.eps", histogram ]

(* Get bin with the most elements *)
lbin = Fold[ If[ Length[#1] < \
Length[#2], #2, #1 ]&, {},
  BinLists[ differences, binwidth ] ]

Print[ "lbin length = ", Length[lbin] ];
Print[ "Turing wavelength = 2 * lbin mean = ", 2 * Mean[lbin] ];
Print[ "Turing wavelength std = 2 * lbin std = ", 2 * \
StandardDeviation[lbin] ];
(*
dimension = 1:
  lbin length = 76
  Turing wavelength = 2 * lbin mean = 3.08269
  Turing wavelength std = 2 * lbin std = 0.00857116
dimension = 2:
  lbin length = 38
  Turing wavelength = 2 * lbin mean = 3.08343
  Turing wavelength std = 2 * lbin std = 0.0136334
dimension = 3, selecting only zeroes < L/4 (25):
  lbin length = 28
  Turing wavelength = 2 * lbin mean = 3.08262
  Turing wavelength std = 2 * lbin std = 0.0127849
*)

(*
(* Calculate integrals *)
Print[ "dimension = ",dimension ];
If[ dimension == 1,
  pYintegralfull = NIntegrate[ pY[x,T], { x, -Lplot/2, Lplot/2 } ];
  pYintegral0    = NIntegrate[ pY[x,T], { x, -pY0, pY0 } ];
  pYintegralr2   = NIntegrate[ pY[x,T] x^2, { x, -pY0, pY0 } ];
  pGintegralfull = NIntegrate[ pG[x,T], { x, -Lplot/2, Lplot/2 } ];
  pGintegral0    = NIntegrate[ pG[x,T], { x, -pG0, pG0 } ];
  pGintegralr2   = NIntegrate[ pG[x,T] x^2, { x, -pG0, pG0 } ];
  pXintegralfull = NIntegrate[ pX[x,T], { x, -Lplot/2, Lplot/2 } ];
  pXintegral0    = NIntegrate[ pX[x,T], { x, -pX0, pX0 } ];
  pXintegralr2   = NIntegrate[ pX[x,T] x^2, { x, -pX0, pX0 } ],
  (*
  Center Y-well integral pY = 0.805689
  Full integral pY = 0.281039
  Core Y RMS radius = 0.302249
  pYintegral0 / pYintegralfull = 2.86683
  Center G-well integral pG = -0.167116
  Full integral pG = 0.0000839175
  Core G RMS radius = 0.363422
  pGintegral0 / pGintegralfull = -1991.44
  Center X-well integral pX = -6.59207
  Full integral pX = 0.000601292
  Core X RMS radius = 0.272469
  pXintegral0 / pXintegralfull = -10963.2
  *)
  If[ dimension == 2,
    pYintegralfull = 2 Pi NIntegrate[ pY[r,T] r, { r, 0, Lplot/2 } ];
    pYintegral0    = 2 Pi NIntegrate[ pY[r,T] r, { r, 0, pY0 } ];
    pYintegralr2   = 2 Pi NIntegrate[ pY[r,T] r^3, { r, 0, pY0 } ];
    pGintegralfull = 2 Pi NIntegrate[ pG[r,T] r, { r, 0, Lplot/2 } ];
    pGintegral0    = 2 Pi NIntegrate[ pG[r,T] r, { r, 0, pG0 } ];
    pGintegralr2   = 2 Pi NIntegrate[ pG[r,T] r^3, { r, 0, pG0 } ];
    pXintegralfull = 2 Pi NIntegrate[ pX[r,T] r, { r, 0, Lplot/2 } ];
    pXintegral0    = 2 Pi NIntegrate[ pX[r,T] r, { r, 0, pX0 } ];
    pXintegralr2   = 2 Pi NIntegrate[ pX[r,T] r^3, { r, 0, pX0 } ],
    (*
    Center Y-well integral pY = 3.11507
    Full integral pY = 0.89306
    Core Y RMS radius = 0.665416
    pYintegral0 / pYintegralfull = 3.48808
    Center G-well integral pG = -0.719688
    Full integral pG = 0.00288212
    Core G RMS radius = 0.739118
    pGintegral0 / pGintegralfull = -249.708
    Center X-well integral pX = -26.2785
    Full integral pX = 0.128201
    Core X RMS radius = 0.634305
    pXintegral0 / pXintegralfull = -204.978
    *)
    If[ dimension == 3,
      pYintegralfull = 4 Pi NIntegrate[ pY[r,T] r^2, { r, 0, Lplot/2 \
} ];
      pYintegral0    = 4 Pi NIntegrate[ pY[r,T] r^2, { r, 0, pY0 } ];
      pYintegralr2   = 4 Pi NIntegrate[ pY[r,T] r^4, { r, 0, pY0 } ];
      pGintegralfull = 4 Pi NIntegrate[ pG[r,T] r^2, { r, 0, Lplot/2 \
} ];
      pGintegral0    = 4 Pi NIntegrate[ pG[r,T] r^2, { r, 0, pG0 } ];
      pGintegralr2   = 4 Pi NIntegrate[ pG[r,T] r^4, { r, 0, pG0 } ];
      pXintegralfull = 4 Pi NIntegrate[ pX[r,T] r^2, { r, 0, Lplot/2 \
} ];
      pXintegral0    = 4 Pi NIntegrate[ pX[r,T] r^2, { r, 0, pX0 } ];
      pXintegralr2   = 4 Pi NIntegrate[ pX[r,T] r^4, { r, 0, pX0 } ],
      (*
      Center Y-well integral pY = 13.1539
      Full integral pY = 3.29781
      Core Y RMS radius = 1.06638
      pYintegral0 / pYintegralfull = 3.98866
      Center G-well integral pG = -3.16651
      Full integral pG = 0.028729
      Core G RMS radius = 1.13515
      pGintegral0 / pGintegralfull = -110.22
      Center X-well integral pX = -111.153
      Full integral pX = 1.93309
      Core X RMS radius = 1.03807
      pXintegral0 / pXintegralfull = -57.5005
      *)
        Print[ "Invalid dimension = ",dimension ];
        Exit
    ]
  ]
]
Print[ "Center Y-well integral pY = ", pYintegral0 ];
Print[ "Full integral pY = ", pYintegralfull ];
Print[ "Core Y RMS radius = ", Sqrt[ pYintegralr2 / pYintegral0 ] ];
Print[ "pYintegral0 / pYintegralfull = ", pYintegral0 / \
pYintegralfull ];
Print[ "Center G-well integral pG = ", pGintegral0 ];
Print[ "Full integral pG = ", pGintegralfull ];
Print[ "Core G RMS radius = ", Sqrt[ pGintegralr2 / pGintegral0 ] ];
Print[ "pGintegral0 / pGintegralfull = ", pGintegral0 / \
pGintegralfull ];
Print[ "Center X-well integral pX = ", pXintegral0 ];
Print[ "Full integral pX = ", pXintegralfull ];
Print[ "Core X RMS radius = ", Sqrt[ pXintegralr2 / pXintegral0 ] ];
Print[ "pXintegral0 / pXintegralfull = ", pXintegral0 / \
pXintegralfull ];
*)

(*
Print[ "Calculate pX minima x-values" ];
nmin1 = NMinimize[ pX[x,T], {x, -4, -3} ]
x1 = x /. Last[ nmin1 ]

nmin2 = NMinimize[ pX[x,T], {x, -0.5, 0.5} ]
x2 = x /. Last[ nmin2 ]

nmin3 = NMinimize[ pX[x,T], {x, 3, 4} ]
x3 = x /. Last[ nmin3 ]
Print[ "Distance between particles = ",(x3-x1)/2 ];
*)

(* dimension = 2:
   +/- 2:
   x = +/- 1.65202
   d = 3.30405
   Integral = -0.000352139

   +/- 1.5:
   x = +/- 1.65156
   d = 3.30311
   Integral = -0.000354372
*)

(*
   dimension = 3:
   +/- 3.3:
   x = +/- 3.31346
   d = 3.31346
   Integral = 0.000804834

   +/- 4:
   x = +/- 3.34204
   d = 3.34204
   Integral = 0.000961667

   +/- 3: T=150
   x = +/- 3.31332
   d = 3.31332
   Integral = 0.000803987

   +/- 3.5: T=150
   x = +/- 3.31475
   d = 3.31475
   Integral = 0.000812707

*)
*)

duration = 10; (* seconds *)
(*fps = 16;*) (* frames per second *)

fps = 1; (* frames per second *)
frame[t_, plotrange_] := Plot[
      { pY[If[dimension == 1, x, Abs[x]], t],
         pG[If[dimension == 1, x, Abs[x]], t],
         pX[If[dimension == 1, x, Abs[x]], t]/10 },
      (*{ pY[Abs[x],t], pG[Abs[x],t], pX[Abs[x],t]/
   10 },*)
      (*, -Xb0/10 /. subs, -Gb0 /. 
   subs },*)
      { x, -Lplot/2, Lplot/2 },
      Frame -> True,
      FrameLabel -> { Style["Space", 32],
           
     Style[ "\!\(\*SubscriptBox[\"\[CurlyPhi]\", \"Y\"]\), \
\!\(\*SubscriptBox[\"\[CurlyPhi]\", \"G\"]\), \!\(\*SubscriptBox[\"\
\[CurlyPhi]\", \"X\"]\)/10", 32] },
   (*
      FrameLabel -> { Style["Space", 32], Style[
         StringForm["``Concentration Potentials",Style["G, X, Y ", 
   Italic]], 32]},
   *)
      FrameStyle -> Thick,
      FrameTicksStyle -> Directive[Thick, 24],
      (* ImageSize -> { 1280, 720 }, (* YouTube HD *) *)
      
   ImageSize -> { 1280 },
      LegendPosition -> { 2, 1 }/4,
      LegendSize -> { 1, 1 }/4,
      LegendShadow -> { 1, -1 }/50,
      PerformanceGoal -> "Quality",
      (* PlotLabel -> Text[Style[title, 42]], *)
      
   PlotLegend -> {
           Style["\*SubscriptBox[\"\[CurlyPhi]\",\"Y\"]", 24],
           Style["\*SubscriptBox[\"\[CurlyPhi]\",\"G\"]", 24],
           Style["\*SubscriptBox[\"\[CurlyPhi]\",\"X\"]/10", 24] },
      PlotRange -> plotrange,
      PlotStyle -> {
           
     Directive[AbsoluteThickness[3], Darker[Yellow], Dashing[Small]],
           Directive[AbsoluteThickness[3], Darker[Blue]],
           Directive[AbsoluteThickness[3], Purple, Dashing[Medium]] }
      (*AbsoluteThickness[3]*)
   ];

(*
manipulate = Manipulate[ frame[t], {t,0,T} ]
Use SWF for a webpage, FLV for YouTube, AVI for Quicktime and \
Windows.
*)
Export[filename <> ".png", frame[T, plotrange]]
If[ dimension == 3,
   Export[filename <> "_zoomed.eps", frame[T, plotrange/100]]
 ]

frames = Table[
   frame[t, plotrange], {t, Ti, Tf, (Tf - Ti)/(duration fps)}];
Export[filename <> ".flv", frames, "FrameRate" -> fps]
(*
frames = Table[frame[t,plotrange], {t, 0, T, T/(duration fps)}];
Export[filename<>".avi", frames, "FrameRate" -> fps]

frames = Table[frame[t], {t, 0, T, T/(duration fps)}];
(* Export[ myname<>".avi", frames, "FrameRate" -> fps] *)
Export[ \
myname<>".flv", frames, "FrameRate" -> fps]
*)

Exit[]

(* Output a 3x2 GraphicsGrid of particle formation snapshots *)
(*
\
times = { 0, Tflux-3, Tflux, Tflux+3, T/4, T }
ggrid = GraphicsGrid[
  Partition[
    Table[ frame[t], { t, times } ],
    3 ],
  ImageSize -> { 1280, 720 }, (* YouTube HD *)
  Spacings -> 0 ];
Export[filename<>".png", ggrid]
*)
